Unit VSOP87.Planet;    //---- Planet coordinates using VSOP87 ---------------------------
//--------------------//
// VSOP87 = Variations Seculaires des Orbites Planetaires 1987
//    by Bretagnon and Francou - Bureau des Longitudes of Paris
//
// calculates planet's ecliptical coordinates Lon,Lat and Heliocentric Radius, given a time
//
// This method is described in J.Meeus book "Astronomical Algorithms" - Chapter 32
// used as basis for this code.
//
// Note that this repository also contains newer VSOP2013 theory, more precise.
// VSOP2013 includes 9 planets and larger time domain.
// This VSOP87 impklementation includes includes only the 4 navigation planets ( Mars, Venus, Jupiter and Saturn ) and Earth
// Note that VSOP87 includes 9 planets. See Meeus book.
// However VSOP2013 requires a large 100 MB table of coeficients, which makes it
// difficult to use in mobile devices.
// VSOP87 gives good enough results for most apps, using a smaller set of data coeficients.
// In this implementation the coeficcients are embedded as code constants,
// rather than a separate file ( as in VSOP2013 )
//
// mostly programmed by Omar
//      repository: github.com/omarreis/VSOP2013
//---------------------------------------------------------------------------------------

interface

uses
  System.SysUtils, System.DateUtils, System.Classes, System.Math,

  VSOP87.PlanetDef,  // coef definitions
  Om.DeltaT,
  Om.Trigonometry,
  Om.AstronomicalAlgorithms;  // date fns

type
  TPlanetVSOP87  = Class(TObject)
  private
    fGMT:TDateTime;      // current time ( set GMT to recalculate star coordinates )
    fAlreadyCalculatedInitialCoordinates:Boolean; //indicates if initial coord calculation performed
    fLastCoordCalculation:Double;  { Julian date of last coordinate calculation }

    fAltitudeOfObjectAtRise:Double;
    //intermediate results generated by CalculaCoordenadas()
    fx,fy,fz:double; //coordenadas geocentricas do astro
    fDelta:double;   //dist da terra ao astro
    fTau:double;     //tempo de propagacao da luz até a terra
    fL,fB,fR:double; //coords heliocentricas do planeta

    Procedure   CalcCoordinates(aDia,aMes,aAno,aHora:Double);
    function HorizontalParallax: Double;
    procedure SetGMT(Value: TDateTime);
    procedure CalculaSunTrueLongitude(T: Double; var Teta: Double);
    procedure CalcDeclination_GHA(D, M, A, H: Double; var aDecl, aGHA: Double);    // aDia,aMes,aAno,aHora in UT
  public
    Name:String;               // Planet name
    fMagnitude:Single;         // low magnitude <--> high brightness
    fParallax:double;          // parallax in altitude
    PlanRec:PPlanConsts;       // pointer to planet coefs
    // current coordinates
    fRA,fDecl:Double;      // curent celestial sphere coordinates
    fGHA:Double;         // Current Greenwich Hour Angle

    constructor Create(aName:String; aPlanRec:PPlanConsts; aMag:single);
    destructor  Destroy; override;
    Procedure   GetObjectData(SL:TStrings);
    Property    GMT:TDateTime    read fGMT write SetGMT;  //set to calculate Planet coordinates
  end;

Procedure CreatePlanetsVSOP87;
function  FindPlanetVSOP87ByName(const aName:String):TPlanetVSOP87;
Procedure FreePlanetsVSOP87;

const
  NumPlanetsVSOP07=7;

var
  Planetas:Array[1..NumPlanetsVSOP07] of TPlanetVSOP87;   // Mars, Venus, Jupiter and Saturn

implementation //-------------------------------------------------------------------------------------

uses
  VSOP87.Earth,      // planet coeficients
  VSOP87.Mars,
  VSOP87.Venus,
  VSOP87.Saturn,
  VSOP87.Jupiter,
  VSOP87.Mercury,
  VSOP87.Uranus,
  VSOP87.Neptune;

type
  // planet definition rec
  RPlanet=record
    Name:String;
    CPlan:PPlanConsts;    // pointer to planet coef set  ( see VSOP87.xxx units )
    Mag:single;           // Magnitude
  end;

const
  ConstPlanetas:Array[1..NumPlanetsVSOP07] of RPlanet=(
    (Name:'Venus'   ; CPlan:@CVenus   ; Mag:-4.9),
    (Name:'Saturn'  ; CPlan:@CSaturn  ; Mag:+0.5),
    (Name:'Mars'    ; CPlan:@CMars    ; Mag:+0.3),
    (Name:'Jupiter' ; CPlan:@CJupiter ; Mag:-2.9),
    (Name:'Mercury' ; CPlan:@CMercury ; Mag:-2.5),
    (Name:'Uranus'  ; CPlan:@CUranus  ; Mag:+5.4),   //from wikipedia
    (Name:'Neptune' ; CPlan:@CNeptune ; Mag:+7.7));

Procedure CreatePlanetsVSOP87;
var i:integer;
begin
  for i:=1 to NumPlanetsVSOP07 do
    with ConstPlanetas[i] do
      Planetas[i] := TPlanetVSOP87.Create(Name,CPlan,Mag);
end;

function  FindPlanetVSOP87ByName(const aName:String):TPlanetVSOP87;
var i:integer; aHIP:integer; aPlanet:TPlanetVSOP87;
begin
  Result:=nil;
  for i:=1 to NumPlanetsVSOP07 do      // linear search
    begin
      aPlanet := Planetas[i];
      if (aPlanet.Name=aName) then
        begin
          Result:=aPlanet;
          exit;
        end;
    end;
end;

Procedure FreePlanetsVSOP87;
var i:integer;
begin
  for i:=1 to NumPlanetsVSOP07 do
    begin
      Planetas[i].Free;
      Planetas[i]:=nil;
    end;
end;


{ TPlanetVSOP87 }
Constructor TPlanetVSOP87.Create(aName:String; aPlanRec:PPlanConsts; aMag:single);
begin
  inherited Create;
  PlanRec := aPlanRec;
  Name    := aName;
  fMagnitude := aMag;
  fParallax  := 0;
end;

destructor TPlanetVSOP87.Destroy;
begin
  inherited;
end;

Procedure TPlanetVSOP87.CalculaSunTrueLongitude(T:Double;var Teta:Double);
var L0,C,T2,T3,M:Double;
begin {Calculo da Long Verd. do Sol}
  T2 := T*T; T3 := T*T2;
  L0 := 280.46645+36000.76983*T+0.0003032*T2;            {FORMULA 24.2}
  M  := 357.5291+35999.0503*T-0.0001559*T2-0.00000048*T3; {24.4}
  C  := +(1.9146-0.004817*T-0.000014*T2)*Sing(M)+(0.019993-0.000101*T)*Sing(2.0*M)+0.000290*Sing(3.0*M);
  Teta:=L0+C;
end;

Procedure  TPlanetVSOP87.CalcCoordinates(aDia,aMes,aAno,aHora:Double);    // aDia,aMes,aAno,aHora in UT
var T,T2,T3,JDE:Double;     {Posicao de planetas pag. 207, capitulo 31}
  Lo,Bo,Ro:Double;  {Coords da terra}
  x2,y2:Double;
  Lamb,Beta,Teta:Double;
  e,Pi_,DLamb,DBeta:Double;
  ax,ay:double;
  Eps:Double;
{Vars da nutacao}
  DPhy,DEps:Double;
  DJ,DeltaT:Double;
const
  Kapa=20.49552; {Constante de aberracao}

  Procedure CalculaTau;  // Tau is a correction for light ray delay due to finite speed of light ( Earth <--> planet distance )
  begin
    CalcCoordinatesVSOP87(JDE,PlanRec,fL ,fB ,fR);  {..do planeta}
    //calc coord geocentricas
    fx := fR*Cosg(fB)*Cosg(fL)-Ro*Cosg(Bo)*Cosg(Lo);  {formula AA 32.1}
    fy := fR*Cosg(fB)*Sing(fL)-Ro*Cosg(Bo)*Sing(Lo);
    fz := fR*Sing(fB)         -Ro*Sing(Bo);
    x2 := fx*fx; y2:=fy*fy;
    fDelta := Sqrt(x2+y2+fz*fz);      {dist da terra ao astro 32.3}
    fTau := 0.0057755183*fDelta;      {Tau=tempo que a luz leva pra chegar do planeta ate a terra}
  end;

begin {TPlanetVSOP87.CalcCoordinates}
  T:=TJ2000(aAno,aMes,aDia,aHora);
  DeltaT := calcDeltaT(T);
  T:=T+DeltaT*SegToSec;             //converte T de UT para TD, usado nos calculos

  JDE:=T; T2:=T*T;
  CalcCoordinatesVSOP87(T,@CEarth,Lo,Bo,Ro); {Calc coords da terra e..}
  CalculaTau;                                   {..calcula do planeta e tempo de viagem da luz}

  JDE:=T-fTau/36525.0;  // instant when the light reaching us left the planet}
  CalculaTau;           // recalc
  fParallax:=8.794/60/fDelta;  //AfC pg. B17
  if (fx<>0) then  //contemp-la o caso do planeta Terra  (x=y=z=0)
    begin
      Lamb := Atan2(fy,fx);     {Calc lat e long}
      Beta := ATan2(fz,Sqrt(x2+y2));
    end
    else begin
      Lamb:=0; Beta:=0;
    end;

  {calc Correcao pela aberracao}
  CalculaSunTrueLongitude(T,Teta);
  e:=0.016708617-0.00004237*T-0.0000001236*T2;
  Pi_:=102.93735+0.71953*T+0.00046*T2;
  DLamb:=(-Kapa*Cosg(Teta-Lamb)+e*kapa*Cosg(Pi_-Lamb))/Cosg(Beta);
  DBeta:=-Kapa*Sing(Beta)*(Sing(Teta-Lamb)-e*Sing(Pi_-Lamb));

  Lamb:=Lamb+DLamb/3600; {aplica Correcao pela aberracao}
  Beta:=Beta+DBeta/3600;

  CorrNut(T,Eps,DPhy,DEps); {Calc Correcao para Nutacao e obliquidade}

  Lamb:=Lamb+DPhy/3600;      {Corrige lamb p/ nutacao Meeus p.213}

  ay:=(Sing(Lamb)*Cosg(Eps)-Tang(Beta)*Sing(Eps));
  ax:=Cosg(Lamb);
  fRA:=Atan2(ay,ax);     {12.3 pag. 89}

  fDecl:=Sing(Beta)*Cosg(Eps)+Cosg(Beta)*Sing(Eps)*Sing(Lamb);
  fDecl:=ASing(fDecl); {12.4}
end;

// setGMT recalculates coordinates, if needed
Procedure TPlanetVSOP87.SetGMT(Value:TDateTime);
var aDia,aMes,aAno:Word; aHora:Double;
begin
  fGMT := Value;
  DecodeDate(Int(fGMT), aAno,aMes,aDia);
  aHora := Frac(fGMT)*24;
  CalcDeclination_GHA(aDia,aMes,aAno,aHora,fDecl,fGHA);
end;

Procedure TPlanetVSOP87.CalcDeclination_GHA(D,M,A,H:Double; var aDecl,aGHA:Double); // calc gha,decl
var GMST,GAST,RAh:Double;
begin
  SiderealTime(D,M,A,H,{out:} GMST,GAST);
  CalcCoordinates(D,M,A,H);        // calc star coordinates RA,Decl

  aDecl := fDecl;
  RAh   := fRA/15;       { Transform RA from degrees to hours }
  AjustaHora(RAh);      { Ajusta no range 0-24 }
  aGHA  := 15*(GAST-RAh);  {Calcula GHA, convertendo p/ graus}
  AjustaAngulo(aGHA);   {Ajusta o angulo colocando entre 0 e 360°}
  {GHAAries:=15*GAST;}  {Calcula GHA de Aries}
  {AjustaAngulo(GHAAries);}
end;


(*  Omega:=125.04452-1934.136261*T; {Subst por CorrNut()}
  L :=280.4665+ 36000.7698*T;
  Ll:=218.3165+481267.8813*T;

  DPhy:=-17.2*Sing(Omega)-1.32*sing(2*L)-0.23*Sing(2*Ll)+0.21*Sing(2*Omega);
  DEps:=  9.2*cosg(Omega)+0.57*cosg(2*L)+0.10*Cosg(2*Ll)-0.09*Cosg(2*Omega);
  Eps0:= 23.4392911+(-46.8150*T-0.00059*T2+0.001813*T3)/3600;    {21.2} *)

function TPlanetVSOP87.HorizontalParallax: Double;
begin
  Result := fParallax;
end;

Procedure  TPlanetVSOP87.GetObjectData(SL:TStrings);
var aSHA:Double;
begin
  SL.Add(Name);
  SL.Add('');

  SL.Add('at time='+ FormatDateTime('dd/mmm/yyyy hh:nn:ss', fGMT) +' UT' );  //GMT = Universal Time
  SL.Add('RA=  '  + floatToGMSD(fRA) +' ( '+ floatToHHMMSS(fRA*24/360)+')' );   // in hours

  aSHA := 360.0 - fRA;                     // SHA and RA are the same thing, but with a different convention
  SL.Add('SHA= '+  floatToGMSD(aSHA) );

  SL.Add('Decl='+  floatToGMSD_Lat(fDecl) );
  SL.Add('GHA= '+  floatToGMSD(fGHA) );

  SL.Add('Mag= '+  Format('%5.2f',[fMagnitude]) );
  SL.Add('Hz Paralax= '+  Format('%5.2f',[fParallax])+'''' );
end;

end.




